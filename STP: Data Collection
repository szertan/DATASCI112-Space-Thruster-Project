{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"11Mxom0eiuSTLEGp8cF804WEu2VlhTw9S","authorship_tag":"ABX9TyOmc2zUkmk5MFLLe4zd5GZh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Data Collection and Cleaning \n"],"metadata":{"id":"_NsSYhLuasbv"}},{"cell_type":"markdown","source":["### 1.1 Downloading the training and test sets through the Kaggle API."],"metadata":{"id":"U90ST9lua6gs"}},{"cell_type":"markdown","source":["The dataset used for the analysis of this project will be collected through the Kaggle API."],"metadata":{"id":"NaPbBoyscS2m"}},{"cell_type":"code","source":["#pull the files from kaggle to colab\n","! pip install -q kaggle\n","from google.colab import files\n","import numpy as np\n","files.upload() #the kaggle.json file is uploaded from a kaggle profile"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":90},"id":"izcMMmYhYAe1","executionInfo":{"status":"ok","timestamp":1679557529090,"user_tz":420,"elapsed":19194,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"outputId":"827df3a7-9d52-4753-c11b-e422b8e39af1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-39f1ba16-b238-453c-8236-7c74ef770c90\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-39f1ba16-b238-453c-8236-7c74ef770c90\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n"]},{"output_type":"execute_result","data":{"text/plain":["{'kaggle.json': b'{\"username\":\"selinzeynepertan\",\"key\":\"773030201988138223277c60623d5592\"}'}"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["! mkdir ~/.kaggle\n","! cp kaggle.json ~/.kaggle/"],"metadata":{"id":"nAZGCQ2RY0Dj","executionInfo":{"status":"ok","timestamp":1679557998639,"user_tz":420,"elapsed":525,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"061585ae-5669-411a-8381-b7b49d05d81a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mkdir: cannot create directory ‘/root/.kaggle’: File exists\n"]}]},{"cell_type":"code","source":["! chmod 600 ~/.kaggle/kaggle.json\n","! kaggle datasets list"],"metadata":{"id":"oFF3fadFY9xz","executionInfo":{"status":"ok","timestamp":1679557998861,"user_tz":420,"elapsed":228,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"95ed9c82-fd05-45dd-99d1-d0026af44f40"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ref                                                                title                                                size  lastUpdated          downloadCount  voteCount  usabilityRating  \n","-----------------------------------------------------------------  --------------------------------------------------  -----  -------------------  -------------  ---------  ---------------  \n","zusmani/pakistan-toshakhana-files                                  Pakistan ToshaKhana Files                             1MB  2023-03-15 16:25:43           2363        109  1.0              \n","ramkrijal/tomato-daily-prices                                      Tomato Daily Prices                                  10KB  2023-03-10 15:39:14           1376         45  1.0              \n","themrityunjaypathak/covid-cases-and-deaths-worldwide               Covid Cases and Deaths WorldWide                      8KB  2023-02-01 12:22:51          14640        477  1.0              \n","datascientistanna/customers-dataset                                Shop Customer Data                                   23KB  2023-02-07 18:42:21          13304        297  1.0              \n","priyankkhanna/flipkart-product-dataset-by-priyank-khanna           Flipkart Product Dataset                              2MB  2023-03-03 13:44:42           1106         28  1.0              \n","amaanansari09/most-streamed-songs-all-time                         Most Streamed Songs (All Time)                        8KB  2023-03-08 10:56:24           2458         64  1.0              \n","utsh0dey/25k-movie-dataset                                         25k IMDb Movie Dataset                                5MB  2023-02-27 18:11:44            963         29  1.0              \n","nidzsharma/covid-19-variant-data                                   COVID-19 Variant Data                                67KB  2023-03-12 14:07:53            697         30  1.0              \n","rkiattisak/student-performance-in-mathematics                      Student performance prediction                        9KB  2023-03-12 04:32:56           2391         58  1.0              \n","ashpalsingh1525/netflix                                            Netflix Cleaned Dataset                              86KB  2023-02-25 12:48:42           1079         35  1.0              \n","imrulhasanrobi/world-population-all-countries-different-parameter  World Population all countries different parameter    8KB  2023-03-16 01:24:18            781         31  1.0              \n","rayhan32/la-liga-player-status-season-2022-2023                    La Liga Player Status  Season 2022-2023              14KB  2023-03-15 19:52:19            572         29  1.0              \n","thedevastator/airbnb-prices-in-european-cities                     Airbnb Prices in European Cities                      4MB  2023-02-20 09:48:04           5088         94  1.0              \n","mirzahasnine/loan-data-set                                         Loan Data Set                                        11KB  2023-03-12 05:02:43           1099         35  0.9411765        \n","mehmettahiraslan/customer-shopping-dataset                         Customer Shopping Dataset - Retail Sales Data         2MB  2023-03-09 07:44:35           1566         57  1.0              \n","ulrikthygepedersen/shark-tank-companies                            Shark Tank Companies                                 70KB  2023-03-02 12:05:27            746         34  1.0              \n","tarique7/airline-incidents-safety-data                             Airline Incidents Safety Data                         7MB  2023-03-08 09:28:38            633         28  1.0              \n","rkiattisak/traveler-trip-data                                      Traveler Trip Dataset                                 4KB  2023-03-06 07:11:05           1373         38  1.0              \n","rkiattisak/salaly-prediction-for-beginer                           Salary Prediction dataset                             3KB  2023-03-07 02:45:11           1356         40  1.0              \n","abdullahshahzad12345/ref-tk-data-02-to-22                          Gift Received by Pak Officials 2002-22 Tosha Khana  120KB  2023-03-14 15:49:14            166         24  1.0              \n","ref                                                                title                                                size  lastUpdated          downloadCount  voteCount  usabilityRating  \n","-----------------------------------------------------------------  --------------------------------------------------  -----  -------------------  -------------  ---------  ---------------  \n","zusmani/pakistan-toshakhana-files                                  Pakistan ToshaKhana Files                             1MB  2023-03-15 16:25:43           2363        109  1.0              \n","ramkrijal/tomato-daily-prices                                      Tomato Daily Prices                                  10KB  2023-03-10 15:39:14           1378         45  1.0              \n","themrityunjaypathak/covid-cases-and-deaths-worldwide               Covid Cases and Deaths WorldWide                      8KB  2023-02-01 12:22:51          14641        477  1.0              \n","datascientistanna/customers-dataset                                Shop Customer Data                                   23KB  2023-02-07 18:42:21          13308        297  1.0              \n","priyankkhanna/flipkart-product-dataset-by-priyank-khanna           Flipkart Product Dataset                              2MB  2023-03-03 13:44:42           1107         28  1.0              \n","amaanansari09/most-streamed-songs-all-time                         Most Streamed Songs (All Time)                        8KB  2023-03-08 10:56:24           2460         64  1.0              \n","utsh0dey/25k-movie-dataset                                         25k IMDb Movie Dataset                                5MB  2023-02-27 18:11:44            963         29  1.0              \n","nidzsharma/covid-19-variant-data                                   COVID-19 Variant Data                                67KB  2023-03-12 14:07:53            698         30  1.0              \n","rkiattisak/student-performance-in-mathematics                      Student performance prediction                        9KB  2023-03-12 04:32:56           2392         58  1.0              \n","ashpalsingh1525/netflix                                            Netflix Cleaned Dataset                              86KB  2023-02-25 12:48:42           1079         35  1.0              \n","imrulhasanrobi/world-population-all-countries-different-parameter  World Population all countries different parameter    8KB  2023-03-16 01:24:18            781         31  1.0              \n","rayhan32/la-liga-player-status-season-2022-2023                    La Liga Player Status  Season 2022-2023              14KB  2023-03-15 19:52:19            572         29  1.0              \n","thedevastator/airbnb-prices-in-european-cities                     Airbnb Prices in European Cities                      4MB  2023-02-20 09:48:04           5088         94  1.0              \n","mirzahasnine/loan-data-set                                         Loan Data Set                                        11KB  2023-03-12 05:02:43           1103         35  0.9411765        \n","mehmettahiraslan/customer-shopping-dataset                         Customer Shopping Dataset - Retail Sales Data         2MB  2023-03-09 07:44:35           1567         57  1.0              \n","ulrikthygepedersen/shark-tank-companies                            Shark Tank Companies                                 70KB  2023-03-02 12:05:27            746         34  1.0              \n","tarique7/airline-incidents-safety-data                             Airline Incidents Safety Data                         7MB  2023-03-08 09:28:38            634         28  1.0              \n","rkiattisak/traveler-trip-data                                      Traveler Trip Dataset                                 4KB  2023-03-06 07:11:05           1373         38  1.0              \n","rkiattisak/salaly-prediction-for-beginer                           Salary Prediction dataset                             3KB  2023-03-07 02:45:11           1356         40  1.0              \n","abdullahshahzad12345/ref-tk-data-02-to-22                          Gift Received by Pak Officials 2002-22 Tosha Khana  120KB  2023-03-14 15:49:14            166         24  1.0              \n"]}]},{"cell_type":"code","source":["! kaggle datasets download -d patrickfleith/spacecraft-thruster-firing-tests-dataset"],"metadata":{"id":"AAFvYw0kZKLu","executionInfo":{"status":"ok","timestamp":1679558000029,"user_tz":420,"elapsed":1177,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5b98554a-3ad2-4433-8f4d-5868c97926f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading spacecraft-thruster-firing-tests-dataset.zip to /content\n"," 99% 2.96G/2.97G [00:31<00:00, 138MB/s]\n","100% 2.97G/2.97G [00:31<00:00, 101MB/s]\n","spacecraft-thruster-firing-tests-dataset.zip: Skipping, found more recently modified local copy (use --force to force download)\n"]}]},{"cell_type":"code","source":["! unzip /content/spacecraft-thruster-firing-tests-dataset.zip "],"metadata":{"id":"KdU1FA0mZ0uF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"92743523-e9d3-41f8-947d-d8b98513c0c5"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Archive:  /content/spacecraft-thruster-firing-tests-dataset.zip\n","replace STFT Dataset Description.pdf? [y]es, [n]o, [A]ll, [N]one, [r]ename: "]}]},{"cell_type":"markdown","source":["### 1.2 Pulling the Metadata into a Pandas DataFrame\n","\n"],"metadata":{"id":"Ma-vSffNbkGP"}},{"cell_type":"markdown","source":["The documentation of the dataset used in this project states that the entries 1269 to 2268 are reserved for testing, whereas the entries 0001 to 1001 are saved for training. We also know that the serial number values 1 to 12 are for training (under column 'sn'), and the remaining serial number values may be used for testing. Hence, we will be seperating our data into two subsets based on this information.\n","\n","The dataset attached to 579 also seems to be missing, to we shall drop the row. "],"metadata":{"id":"fYPYv1ZlZnA3"}},{"cell_type":"code","source":["import pandas as pd\n","metadata = pd.read_csv(\"/content/metadata.csv\")\n","metadata = metadata.drop(578)\n","metadata"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"3MT3t-lSaW1H","executionInfo":{"status":"ok","timestamp":1679557692019,"user_tz":420,"elapsed":461,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"outputId":"75284a3c-26c4-4ae8-a1ea-20fab449e1d3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       uid                               filename  test_id  sn  test_pressure  \\\n","0        1          00001_001_SN01_24bars_ssf.csv        1   1           24.0   \n","1        2          00002_002_SN01_21bars_ssf.csv        2   1           21.0   \n","2        3          00003_003_SN01_18bars_ssf.csv        3   1           18.0   \n","3        4          00004_004_SN01_15bars_ssf.csv        4   1           15.0   \n","4        5          00005_005_SN01_12bars_ssf.csv        5   1           12.0   \n","...    ...                                    ...      ...  ..            ...   \n","2607  2608         02608_108_SN24_5bars_onmod.csv      108  24            5.0   \n","2608  2609        02609_109_SN24_5bars_offmod.csv      109  24            5.0   \n","2609  2610  02610_110_SN24_5bars_random_short.csv      110  24            5.0   \n","2610  2611   02611_111_SN24_5bars_random_long.csv      111  24            5.0   \n","2611  2612  02612_112_SN24_5bars_random_mixed.csv      112  24            5.0   \n","\n","         test_mode   vl1    vl2    vl3  anomalous  anomaly_code  \\\n","0              ssf  True   True  False      False           0.0   \n","1              ssf  True   True  False      False           0.0   \n","2              ssf  True   True  False      False           0.0   \n","3              ssf  True   True  False      False           0.0   \n","4              ssf  True   True  False      False           0.0   \n","...            ...   ...    ...    ...        ...           ...   \n","2607         onmod  True  False  False      False           0.0   \n","2608        offmod  True   True  False      False           0.0   \n","2609  random_short  True   True  False      False           0.0   \n","2610   random_long  True   True  False      False           0.0   \n","2611  random_mixed  True   True  False      False           0.0   \n","\n","      cumulated_throughput  cumulated_on_time  cumulated_pulses  \n","0                 0.000000           0.000000               0.0  \n","1                 0.451717           0.083333               1.0  \n","2                 0.842268           0.166667               2.0  \n","3                 1.174725           0.250000               3.0  \n","4                 1.452586           0.333333               4.0  \n","...                    ...                ...               ...  \n","2607             20.603296           6.743203           20860.0  \n","2608             20.629288           6.765689           21660.0  \n","2609             20.868589           6.976800           22460.0  \n","2610             20.912820           7.016875           22760.0  \n","2611             21.077818           7.157153           22853.0  \n","\n","[2611 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-5b08731e-4f2a-4de2-8cbc-a9886f2ff9f9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>uid</th>\n","      <th>filename</th>\n","      <th>test_id</th>\n","      <th>sn</th>\n","      <th>test_pressure</th>\n","      <th>test_mode</th>\n","      <th>vl1</th>\n","      <th>vl2</th>\n","      <th>vl3</th>\n","      <th>anomalous</th>\n","      <th>anomaly_code</th>\n","      <th>cumulated_throughput</th>\n","      <th>cumulated_on_time</th>\n","      <th>cumulated_pulses</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>00001_001_SN01_24bars_ssf.csv</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>24.0</td>\n","      <td>ssf</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>00002_002_SN01_21bars_ssf.csv</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>21.0</td>\n","      <td>ssf</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.451717</td>\n","      <td>0.083333</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>00003_003_SN01_18bars_ssf.csv</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>18.0</td>\n","      <td>ssf</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.842268</td>\n","      <td>0.166667</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>00004_004_SN01_15bars_ssf.csv</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>15.0</td>\n","      <td>ssf</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>1.174725</td>\n","      <td>0.250000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>00005_005_SN01_12bars_ssf.csv</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>12.0</td>\n","      <td>ssf</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>1.452586</td>\n","      <td>0.333333</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2607</th>\n","      <td>2608</td>\n","      <td>02608_108_SN24_5bars_onmod.csv</td>\n","      <td>108</td>\n","      <td>24</td>\n","      <td>5.0</td>\n","      <td>onmod</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>20.603296</td>\n","      <td>6.743203</td>\n","      <td>20860.0</td>\n","    </tr>\n","    <tr>\n","      <th>2608</th>\n","      <td>2609</td>\n","      <td>02609_109_SN24_5bars_offmod.csv</td>\n","      <td>109</td>\n","      <td>24</td>\n","      <td>5.0</td>\n","      <td>offmod</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>20.629288</td>\n","      <td>6.765689</td>\n","      <td>21660.0</td>\n","    </tr>\n","    <tr>\n","      <th>2609</th>\n","      <td>2610</td>\n","      <td>02610_110_SN24_5bars_random_short.csv</td>\n","      <td>110</td>\n","      <td>24</td>\n","      <td>5.0</td>\n","      <td>random_short</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>20.868589</td>\n","      <td>6.976800</td>\n","      <td>22460.0</td>\n","    </tr>\n","    <tr>\n","      <th>2610</th>\n","      <td>2611</td>\n","      <td>02611_111_SN24_5bars_random_long.csv</td>\n","      <td>111</td>\n","      <td>24</td>\n","      <td>5.0</td>\n","      <td>random_long</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>20.912820</td>\n","      <td>7.016875</td>\n","      <td>22760.0</td>\n","    </tr>\n","    <tr>\n","      <th>2611</th>\n","      <td>2612</td>\n","      <td>02612_112_SN24_5bars_random_mixed.csv</td>\n","      <td>112</td>\n","      <td>24</td>\n","      <td>5.0</td>\n","      <td>random_mixed</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>21.077818</td>\n","      <td>7.157153</td>\n","      <td>22853.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2611 rows × 14 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b08731e-4f2a-4de2-8cbc-a9886f2ff9f9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5b08731e-4f2a-4de2-8cbc-a9886f2ff9f9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5b08731e-4f2a-4de2-8cbc-a9886f2ff9f9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["### 1.3 Exploring Individual Firing Dataframes "],"metadata":{"id":"cK7ikKCWXwQu"}},{"cell_type":"code","source":["sample = pd.read_csv('/content/dataset/dataset/train/00001_001_SN01_24bars_ssf.csv')\n","sample"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"7IOEwb7cw7qC","executionInfo":{"status":"ok","timestamp":1679557692020,"user_tz":420,"elapsed":20,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"outputId":"ee9d9c4b-ea4d-4d83-9abe-e49c228e6574"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          time  ton    thrust           mfr   vl  anomaly_code\n","0      2021-01-18 08:00:00.000    0 -0.003521  0.000000e+00  0.0           NaN\n","1      2021-01-18 08:00:00.010    0 -0.000250  0.000000e+00  0.0           NaN\n","2      2021-01-18 08:00:00.020    0 -0.002765  0.000000e+00  0.0           NaN\n","3      2021-01-18 08:00:00.030    0  0.000846  0.000000e+00  0.0           NaN\n","4      2021-01-18 08:00:00.040    0  0.003115  0.000000e+00  0.0           NaN\n","...                        ...  ...       ...           ...  ...           ...\n","30595  2021-01-18 08:05:05.950    0  0.000283  0.000000e+00  1.0           NaN\n","30596  2021-01-18 08:05:05.960    0 -0.001638  0.000000e+00  1.0           NaN\n","30597  2021-01-18 08:05:05.970    0  0.000856  0.000000e+00  1.0           NaN\n","30598  2021-01-18 08:05:05.980    0 -0.000922  1.939685e-16  1.0           NaN\n","30599  2021-01-18 08:05:05.990    0 -0.005390  3.295604e-15  1.0           NaN\n","\n","[30600 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-db7fe334-abb8-4ad4-a6cb-d71975080b95\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>time</th>\n","      <th>ton</th>\n","      <th>thrust</th>\n","      <th>mfr</th>\n","      <th>vl</th>\n","      <th>anomaly_code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-01-18 08:00:00.000</td>\n","      <td>0</td>\n","      <td>-0.003521</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-01-18 08:00:00.010</td>\n","      <td>0</td>\n","      <td>-0.000250</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-01-18 08:00:00.020</td>\n","      <td>0</td>\n","      <td>-0.002765</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-01-18 08:00:00.030</td>\n","      <td>0</td>\n","      <td>0.000846</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-01-18 08:00:00.040</td>\n","      <td>0</td>\n","      <td>0.003115</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>30595</th>\n","      <td>2021-01-18 08:05:05.950</td>\n","      <td>0</td>\n","      <td>0.000283</td>\n","      <td>0.000000e+00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>30596</th>\n","      <td>2021-01-18 08:05:05.960</td>\n","      <td>0</td>\n","      <td>-0.001638</td>\n","      <td>0.000000e+00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>30597</th>\n","      <td>2021-01-18 08:05:05.970</td>\n","      <td>0</td>\n","      <td>0.000856</td>\n","      <td>0.000000e+00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>30598</th>\n","      <td>2021-01-18 08:05:05.980</td>\n","      <td>0</td>\n","      <td>-0.000922</td>\n","      <td>1.939685e-16</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>30599</th>\n","      <td>2021-01-18 08:05:05.990</td>\n","      <td>0</td>\n","      <td>-0.005390</td>\n","      <td>3.295604e-15</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>30600 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db7fe334-abb8-4ad4-a6cb-d71975080b95')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-db7fe334-abb8-4ad4-a6cb-d71975080b95 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-db7fe334-abb8-4ad4-a6cb-d71975080b95');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["A bit of ground work shows that each firing dataset has anywhere from 3000 to 30000 datapoints included inside it. Thus, we need a way to make sense of the information included here. The only two parameters we will be using here will be the thrust and mfr columns. We will achieve this by taking calculating the root-mean-square value of the thrust column and the average value of the mfr column. We will then save these values, one value for each row, into the metadata dataframe. "],"metadata":{"id":"oYcyKIqDX6E9"}},{"cell_type":"code","source":["metadata.loc[575:580, :]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"Vfu807P1wBn9","executionInfo":{"status":"ok","timestamp":1679557692020,"user_tz":420,"elapsed":18,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"outputId":"3ef3b0c7-a8d3-44d1-da7c-60c401ef1876"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     uid                                filename  test_id  sn  test_pressure  \\\n","575  576         00576_016_SN06_24bars_ramp4.csv       16   6           24.0   \n","576  577         00577_017_SN06_24bars_onmod.csv       17   6           24.0   \n","577  578      00578_018_SN06_18.0bars_offmod.csv       18   6           18.0   \n","579  580  00580_019_SN06_24bars_random_short.csv       19   6           24.0   \n","580  581   00581_020_SN06_24bars_random_long.csv       20   6           24.0   \n","\n","        test_mode   vl1   vl2    vl3  anomalous  anomaly_code  \\\n","575         ramp4  True  True  False       True          28.0   \n","576         onmod  True  True  False       True          28.0   \n","577        offmod  True  True  False       True          14.0   \n","579  random_short  True  True  False      False           0.0   \n","580   random_long  True  True  False      False           0.0   \n","\n","     cumulated_throughput  cumulated_on_time  cumulated_pulses  \n","575              2.736946           0.713361            1343.0  \n","576              3.334709           0.826417            1416.0  \n","577              4.240511           1.059333            3016.0  \n","579              5.034695           1.270444            3816.0  \n","580              5.232672           1.310625            4116.0  "],"text/html":["\n","  <div id=\"df-46be12db-1d25-479a-8b4c-9db61535d90f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>uid</th>\n","      <th>filename</th>\n","      <th>test_id</th>\n","      <th>sn</th>\n","      <th>test_pressure</th>\n","      <th>test_mode</th>\n","      <th>vl1</th>\n","      <th>vl2</th>\n","      <th>vl3</th>\n","      <th>anomalous</th>\n","      <th>anomaly_code</th>\n","      <th>cumulated_throughput</th>\n","      <th>cumulated_on_time</th>\n","      <th>cumulated_pulses</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>575</th>\n","      <td>576</td>\n","      <td>00576_016_SN06_24bars_ramp4.csv</td>\n","      <td>16</td>\n","      <td>6</td>\n","      <td>24.0</td>\n","      <td>ramp4</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>28.0</td>\n","      <td>2.736946</td>\n","      <td>0.713361</td>\n","      <td>1343.0</td>\n","    </tr>\n","    <tr>\n","      <th>576</th>\n","      <td>577</td>\n","      <td>00577_017_SN06_24bars_onmod.csv</td>\n","      <td>17</td>\n","      <td>6</td>\n","      <td>24.0</td>\n","      <td>onmod</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>28.0</td>\n","      <td>3.334709</td>\n","      <td>0.826417</td>\n","      <td>1416.0</td>\n","    </tr>\n","    <tr>\n","      <th>577</th>\n","      <td>578</td>\n","      <td>00578_018_SN06_18.0bars_offmod.csv</td>\n","      <td>18</td>\n","      <td>6</td>\n","      <td>18.0</td>\n","      <td>offmod</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>14.0</td>\n","      <td>4.240511</td>\n","      <td>1.059333</td>\n","      <td>3016.0</td>\n","    </tr>\n","    <tr>\n","      <th>579</th>\n","      <td>580</td>\n","      <td>00580_019_SN06_24bars_random_short.csv</td>\n","      <td>19</td>\n","      <td>6</td>\n","      <td>24.0</td>\n","      <td>random_short</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>5.034695</td>\n","      <td>1.270444</td>\n","      <td>3816.0</td>\n","    </tr>\n","    <tr>\n","      <th>580</th>\n","      <td>581</td>\n","      <td>00581_020_SN06_24bars_random_long.csv</td>\n","      <td>20</td>\n","      <td>6</td>\n","      <td>24.0</td>\n","      <td>random_long</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>5.232672</td>\n","      <td>1.310625</td>\n","      <td>4116.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46be12db-1d25-479a-8b4c-9db61535d90f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-46be12db-1d25-479a-8b4c-9db61535d90f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-46be12db-1d25-479a-8b4c-9db61535d90f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["for index in metadata.index:\n","  if index % 100 == 0:   \n","    print(index)\n","  path_prefix = '/content/dataset/dataset/train/' if metadata.loc[index, 'sn'] <= 12 else '/content/dataset/dataset/test/'\n","  read = pd.read_csv(path_prefix + metadata.loc[index, 'filename'])\n","  metadata.loc[index, 'thrust_rms'] = np.sqrt((read['thrust'] ** 2).mean())\n","  metadata.loc[index, 'mfr_avg'] = (read['mfr']).mean()"],"metadata":{"id":"KFQO-vrejjrH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679557996561,"user_tz":420,"elapsed":304558,"user":{"displayName":"Selin Zeynep Ertan","userId":"03291617936943485183"}},"outputId":"f7947647-d2ed-4494-b2bd-153413ad9b5f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","100\n","200\n","300\n","400\n","500\n","600\n","700\n","800\n","900\n","1000\n","1100\n","1200\n","1300\n","1400\n","1500\n","1600\n","1700\n","1800\n","1900\n","2000\n","2100\n","2200\n","2300\n","2400\n","2500\n","2600\n"]}]},{"cell_type":"code","source":["metadata_train = metadata.loc[metadata['sn'] <= 12, :]\n","df_metadata_train = pd.DataFrame(metadata_train)\n","df_metadata_train.to_csv('/content/drive/MyDrive/STP/metadata_train.csv', index=False)"],"metadata":{"id":"aAE1TheEyQD8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metadata_test = metadata.loc[metadata['sn'] > 12, :]\n","df_metadata_test = pd.DataFrame(metadata_test)\n","df_metadata_test.to_csv('/content/drive/MyDrive/STP/metadata_test.csv', index=False)"],"metadata":{"id":"ZQsWrrigzarG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We have now seperated our data into training and testing segments and saved them as separate data files. We will be using them for the rest of this project as our primary datasets. "],"metadata":{"id":"JsF2WK8DZF7g"}}]}